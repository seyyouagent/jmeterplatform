package com.test.utils;import com.alibaba.dubbo.config.ApplicationConfig;import com.alibaba.dubbo.config.ReferenceConfig;import com.alibaba.dubbo.config.RegistryConfig;import com.alibaba.dubbo.config.annotation.Service;import com.alibaba.dubbo.config.utils.ReferenceConfigCache;import com.alibaba.dubbo.rpc.service.GenericService;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import org.springframework.stereotype.Component;import java.util.ArrayList;import java.util.List;import java.util.Map;@Component@Servicepublic class DubboUtil {    public static Object parsmsTure(String applicationName,String addr,String interfaceAddr,String ref,String group,String version,String[] classAddr,String params){        ApplicationConfig application = new ApplicationConfig();        application.setName(applicationName);        RegistryConfig registry = new RegistryConfig();        Object result = new Object();        registry.setAddress("zookeeper://" + addr);        ReferenceConfig<GenericService> reference = new ReferenceConfig<GenericService>();        reference.setApplication(application);        reference.setRegistry(registry);        reference.setInterface(interfaceAddr);        reference.setGeneric(true);        reference.setGroup(group);        reference.setVersion(version);        System.out.println(11111);        List<Map<String,Object>> list = new ArrayList<>();//        Object[] o = null;        JSONObject j = JSON.parseObject(params);        Map<String,Object> m = (Map<String,Object>)j;//        if(params != "" && !params.equals("")) {//            JSONArray array = JSONArray.parseArray(params);//            for(int i = 0;i < array.size();i++) {//                JSONObject j = array.getJSONObject(i);//                Map<String,Object> m = (Map<String,Object>)j;//                list.add(m);//            }//        }//        o = list.toArray();        try {            ReferenceConfigCache cache = ReferenceConfigCache.getCache();            GenericService genericService = cache.get(reference);            // 基本类型以及Date,List,Map等不需要转换，直接调用            result = genericService.$invoke(ref,classAddr,new Object[]{m});            System.out.println(result);        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    public static Object parsmsFalse(String applicationName,String addr,String interfaceAddr,String ref,String group,String version){        ApplicationConfig application = new ApplicationConfig();        application.setName(applicationName); // procurement-order-main        RegistryConfig registry = new RegistryConfig();        Object result = new Object();        registry.setAddress("zookeeper://" + addr);// 10.2.1.40:2181,10.2.1.40:2181,10.2.1.40:2181        ReferenceConfig<GenericService> reference = new ReferenceConfig<GenericService>();        reference.setApplication(application);        reference.setRegistry(registry);        reference.setInterface(interfaceAddr); // com.sprucetec.pms.po.api.service.adjustpriceconfiglog.AdjustPriceConfigLogService        reference.setGeneric(true);        reference.setGroup(group);        reference.setVersion(version);        try {            ReferenceConfigCache cache = ReferenceConfigCache.getCache();            GenericService genericService = cache.get(reference);            // 基本类型以及Date,List,Map等不需要转换，直接调用            result = genericService.$invoke(ref, // listAdjustPriceConfigLog                    new String[]{},                    new Object[]{});            System.out.println(result);        } catch (Exception e) {            e.printStackTrace();        }        return result;    }}